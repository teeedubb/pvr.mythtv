##Explicitly send your builds to the container-based infrastructure
sudo: false

language: cpp

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  global:
    - COVERITY_SCAN_PROJECT_NAME="janbar/pvr.mythtv"
    - COVERITY_SCAN_NOTIFICATION_EMAIL="jlbarriere68@gmail.com"
    - COVERITY_SCAN_BRANCH_PATTERN="coverity_scan"
    - COVERITY_SCAN_BUILD_COMMAND="cmake --build ."
    - COVERITY_SCAN_BUILD_URL="https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh"
    - COVERITY_SCAN_BUILD="curl -s $COVERITY_SCAN_BUILD_URL | bash"
    - secure: "HM34r7AQ+XQ2UE1Cy7NtqcWyVxTFMntwV3k/APN6kxMPTWAHpkOWrtoO+wxGY+D7yw+dtVl5wSziyWQW+6tcg03qgJWugSxFqH9rvSTVNEQ19Gjoz6zxn+usmSa7fYxwGYXYWl+GnSTwLr/NKKOCjh1OUXBJ0rz31CK+gU1BgNtQTcbQLA9r3kCsIy43cZaqxusDRQk9AmtzA0eb+myH7mcRVWfBxKu1f4Hk+dgD+TleeicLF/YyHLYtcDawPcAysKgwDWSVXASHh9Ie5HY4zioMa92EUiThTBqHQTfSLVc+5qOrU0LX7RcUHsCuWfSCUjRA+nQ7ZIIgVj0L/UU/H0esafT9WE/9o7LdFXkPa8FQwZw2I8gcodaPKSpHoZvfeYgxibOPiUzY+r66CkOOpLyQn73oDMuwPqypY47dykINZZt061ljOLTuu3CSVZvdvZCKkQE2i/Db23HZ4wjSLTLsKVq7qXn6YA9Xo246cwWH02Gf2mJGIf1oEY1F78C7NXyRijit5qCzNf1mJXecG/yO/MpFVHQ7Jg787gACPQ+nWiIQ6Zob3KBezC0XgjBe660VZPct++g69NZzBlMslk+ioDqdNUkLZIShlPL3DiLqRRA5meBidyckB2XOSRX16v5ajIK8nWrnVLb004AcMrXLmiRlzHfQInfUUndxmhE="

matrix:
  include:
     - os: linux
       compiler: gcc
       env: COVERITY_SCAN=1

  allow_failures:
     - env: COVERITY_SCAN=1

  exclude:
     - os: osx
       compiler: gcc
     - os: linux
       compiler: clang

  fast_finish: true

install:
        - if [ "$TRAVIS_OS_NAME" = "linux" ]; then mkdir $HOME/cmake && curl https://cmake.org/files/v3.3/cmake-3.3.0-Linux-x86_64.tar.gz | tar -xz --strip-components=1 -C $HOME/cmake && export PATH=$HOME/cmake/bin:$PATH ; fi

##Adding and install APT for Container-based infrastructure
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
      - gcc-4.9
      - g++-4.9
      - clang

before_script:
  - if [ "$TRAVIS_OS_NAME" = "linux" -a "$CXX" = "g++" ]; then export CXX="g++-4.9" CC="gcc-4.9"; fi
  - cmake --version
  - mkdir build && cd build
  - cmake .. -Wdev -DCMAKE_CXX_COMPILER=$(which $CXX) -DCMAKE_C_COMPILER=$(which $CC)

script:
  - if [ "$COVERITY_SCAN" != 1 ]; then cmake --build .; fi
  - if [ "$COVERITY_SCAN" != 1 ]; then cmake ../ -DPACKAGE_ZIP=ON && cmake --build . --target package; fi
  - if [ "$COVERITY_SCAN" = 1 ]; then  eval "${COVERITY_SCAN_BUILD}"; fi

